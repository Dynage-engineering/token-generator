/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  MaxLength,
  IsDate,
  ValidateNested,
  IsOptional,
  IsNumber,
  Min,
  Max,
  IsInt,
  IsEnum,
} from "class-validator";

import { Type } from "class-transformer";
import { User } from "../../user/base/User";
import { EnumTokenSocials } from "./EnumTokenSocials";

@ObjectType()
class Token {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  chain!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  createdBy?: User | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  description!: string | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @Field(() => Number)
  initialPrice!: number;

  @ApiProperty({
    required: true,
    type: Number,
  })
  @IsInt()
  @Max(999999999999)
  @Field(() => Number)
  quantity!: number;

  @ApiProperty({
    required: false,
    enum: EnumTokenSocials,
  })
  @IsEnum(EnumTokenSocials)
  @IsOptional()
  @Field(() => EnumTokenSocials, {
    nullable: true,
  })
  socials?: "Twitter" | "Telegram" | "Website" | "Discord" | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  symbolField!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  token_name!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @Field(() => String)
  walletAddress!: string;
}

export { Token as Token };
